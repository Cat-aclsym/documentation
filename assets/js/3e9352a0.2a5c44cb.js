"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[5213],{7959:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>t,contentTitle:()=>c,default:()=>h,frontMatter:()=>l,metadata:()=>d,toc:()=>a});var s=i(4848),r=i(8453);const l={title:"Coding Guideline",sidebar_position:1,description:"GDScript coding guideline"},c="Coding Guideline",d={id:"development/guides/coding-guidelines",title:"Coding Guideline",description:"GDScript coding guideline",source:"@site/docs/development/guides/coding-guidelines.md",sourceDirName:"development/guides",slug:"/development/guides/coding-guidelines",permalink:"/documentation/docs/development/guides/coding-guidelines",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/development/guides/coding-guidelines.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Coding Guideline",sidebar_position:1,description:"GDScript coding guideline"},sidebar:"tutorialSidebar",previous:{title:"ide-configuration",permalink:"/documentation/docs/setup/ide-configuration"},next:{title:"Files Structure",permalink:"/documentation/docs/development/guides/file-structure"}},t={},a=[{value:"Script Structure",id:"script-structure",level:2},{value:"Header",id:"header",level:3},{value:"Signals",id:"signals",level:3},{value:"Enums",id:"enums",level:3},{value:"Constants",id:"constants",level:3},{value:"Variables",id:"variables",level:3},{value:"Function Ordering and Naming",id:"function-ordering-and-naming",level:3},{value:"Function Parameters and Return Types",id:"function-parameters-and-return-types",level:3},{value:"Documentation",id:"documentation",level:2},{value:"Code Practices",id:"code-practices",level:2},{value:"Snippets",id:"snippets",level:2},{value:"VSCode",id:"vscode",level:3},{value:"External resources",id:"external-resources",level:2},{value:"TODO",id:"todo",level:2}];function o(n){const e={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"coding-guideline",children:"Coding Guideline"})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"script-structure",children:"Script Structure"}),"\n",(0,s.jsx)(e.p,{children:"All scripts must adhere to the following structure:"}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"#header",children:"Header"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"#class_name-extends",children:"class_name + extends"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"#enums",children:"Enums"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"#constants",children:"Constants"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"#variables",children:"Exported Variables"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"#variables",children:"Public Variables"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"#variables",children:"Private Variables"})}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.a,{href:"#function-ordering-and-naming",children:"Core Functions"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.code,{children:"_init()"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.code,{children:"_enter_tree()"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.code,{children:"_ready()"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.code,{children:"_process(delta: float)"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.code,{children:"_physics_process(delta: float)"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.code,{children:"_draw()"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"#function-ordering-and-naming",children:"Public Functions (class methods)"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"#function-ordering-and-naming",children:"Private Functions"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"#function-ordering-and-naming",children:"Signal Callbacks"})}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"header",children:"Header"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Every"})," file must start with the following header:"]}),"\n",(0,s.jsx)(e.li,{children:"Example :"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"## \xa9 [2024] A7 Studio. All rights reserved. Trademark.\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["The header must be specialized if it is for an important script, such as interface (e.g ",(0,s.jsx)(e.code,{children:"ilevel.gd"}),")"]}),"\n",(0,s.jsx)(e.li,{children:"Example:"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-gdscipt",children:"class_name ILevel\r\nextends Node2d\r\n## Interface for level class. All levels node inherit for this node.\r\n##\r\n## The description of the script, what it can do,\r\n## and any further detail.\r\n##\r\n## @tutorial:             https://example.com/tutorial_1\r\n## @tutorial(Tutorial 2): https://example.com/tutorial_2\r\n## @experimental\r\n## \xa9 [2024] A7 Studio. All rights reserved. Trademark.\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Use tags if needed :"}),"\n"]}),"\n",(0,s.jsxs)(e.table,{children:[(0,s.jsx)(e.thead,{children:(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.th,{children:"Description"}),(0,s.jsx)(e.th,{children:"No tag."})]})}),(0,s.jsxs)(e.tbody,{children:[(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:"Deprecated"}),(0,s.jsxs)(e.td,{children:[(0,s.jsx)(e.code,{children:"@deprecated"}),(0,s.jsx)("br",{}),(0,s.jsx)(e.code,{children:"@deprecated: Use [member another] instead."})]})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:"Experimental"}),(0,s.jsxs)(e.td,{children:[(0,s.jsx)(e.code,{children:"@experimental"}),(0,s.jsx)("br",{}),(0,s.jsx)(e.code,{children:"@experimental: This method is incomplete."})]})]})]})]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["Use ",(0,s.jsx)(e.code,{children:"@tutorial"})," tag to redirect to external documentation"]}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"signals",children:"Signals"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Signal Declarations:"})," Use ",(0,s.jsx)(e.code,{children:"snake_case"})," for signal names.","\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Example:"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"signal my_signal\n"})}),"\n",(0,s.jsx)(e.h3,{id:"enums",children:"Enums"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Naming Conventions:"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["Enums should be named using ",(0,s.jsx)(e.code,{children:"PascalCase"}),"."]}),"\n",(0,s.jsxs)(e.li,{children:["Enum values should be in ",(0,s.jsx)(e.code,{children:"ALL_CAPS"}),"."]}),"\n",(0,s.jsx)(e.li,{children:"Include a trailing comma for multiline enum declarations."}),"\n",(0,s.jsx)(e.li,{children:"Example:"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"enum MyEnum {\r\n    VALUE_ONE,\r\n    VALUE_TWO,\r\n    VALUE_THREE,\r\n}\n"})}),"\n",(0,s.jsx)(e.h3,{id:"constants",children:"Constants"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Naming Conventions:"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["Constants should be named in ",(0,s.jsx)(e.code,{children:"ALL_CAPS"}),", with underscores (",(0,s.jsx)(e.code,{children:"_"}),") separating words."]}),"\n",(0,s.jsx)(e.li,{children:"Example:"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"const MAX_HEALTH: int = 100\n"})}),"\n",(0,s.jsx)(e.h3,{id:"variables",children:"Variables"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Naming Conventions:"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["Public variables should be in ",(0,s.jsx)(e.code,{children:"snake_case"}),"."]}),"\n",(0,s.jsxs)(e.li,{children:["Private variables should start with an underscore (",(0,s.jsx)(e.code,{children:"_"}),") and follow ",(0,s.jsx)(e.code,{children:"snake_case"}),"."]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"No exceptions"})," to the above rules."]}),"\n",(0,s.jsxs)(e.li,{children:["If unsure whether a variable should be private or public, ",(0,s.jsx)(e.strong,{children:"make it private"})," and change it later if needed."]}),"\n",(0,s.jsx)(e.li,{children:"Avoid redundant type declarations when using implicit typing."}),"\n",(0,s.jsx)(e.li,{children:"Example:"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"var public_var: int = 10\r\nvar _private_var: int\r\nvar _implicit_type := Vector2(0, 1)  # Preferred\r\nvar _redundant_type: Vector2 = Vector2(0, 1)  # Avoid\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Exported Variables:"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["Use the ",(0,s.jsx)(e.code,{children:"@export"})," keyword for exported variables, and name them in ",(0,s.jsx)(e.code,{children:"snake_case"}),"."]}),"\n",(0,s.jsx)(e.li,{children:"Example:"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'@export var my_exported_var: String = "Hello World!"\r\n@export_enum("Option1", "Option2") var my_enum_var: String\n'})}),"\n",(0,s.jsx)(e.h3,{id:"function-ordering-and-naming",children:"Function Ordering and Naming"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Function Order:"}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:["Core functions in order:","\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.code,{children:"_init()"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.code,{children:"_enter_tree()"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.code,{children:"_ready()"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.code,{children:"_process(delta: float)"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.code,{children:"_physics_process(delta: float)"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.code,{children:"_draw()"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.li,{children:"Public functions (class methods)"}),"\n",(0,s.jsx)(e.li,{children:"Private functions"}),"\n",(0,s.jsx)(e.li,{children:"Signal callbacks"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Tip:"})," Adding comments such as ",(0,s.jsx)(e.code,{children:"#core"}),", ",(0,s.jsx)(e.code,{children:"#public"}),", ",(0,s.jsx)(e.code,{children:"#private"}),", ",(0,s.jsx)(e.code,{children:"#signal"})," between each section can improve readability."]}),"\n"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Function Naming:"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["Use ",(0,s.jsx)(e.code,{children:"snake_case"})," for function names."]}),"\n",(0,s.jsxs)(e.li,{children:["Private functions should start with an underscore (",(0,s.jsx)(e.code,{children:"_"}),")."]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Always"})," specify the function return type, even for core functions."]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Always"})," specify parameter types."]}),"\n",(0,s.jsx)(e.li,{children:"Example:"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"func my_public_function() -> int:\r\n    return some_value\r\n\r\nfunc _my_private_function(my_param: int) -> void:\r\n    pass\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Signal Callback Functions:"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["Name signal callback functions in the format ",(0,s.jsx)(e.code,{children:"_on_<NodeName>_<signal_name>()"}),"."]}),"\n",(0,s.jsx)(e.li,{children:"Example:"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'func _on_Player_died() -> void:\r\n    print("Player has died.")\n'})}),"\n",(0,s.jsx)(e.h3,{id:"function-parameters-and-return-types",children:"Function Parameters and Return Types"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.strong,{children:"Always specify return types and parameter types."})}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Underscore for Unused Parameters:"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["Prefix parameters with an underscore (",(0,s.jsx)(e.code,{children:"_"}),") if they are not used within the function."]}),"\n",(0,s.jsx)(e.li,{children:"Example:"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"func _process(_delta: float) -> void:\r\n    pass\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsxs)(e.strong,{children:["Avoiding ",(0,s.jsx)(e.code,{children:"Variant"}),":"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["Avoid using the ",(0,s.jsx)(e.code,{children:"Variant"})," type unless absolutely necessary. Always document what the function returns when using ",(0,s.jsx)(e.code,{children:"Variant"}),"."]}),"\n",(0,s.jsx)(e.li,{children:"Example:"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"# @return: Player instance or null\r\nfunc get_player_if_ready() -> Variant:\r\n    if Global.player != null:\r\n        return Global.player\r\n    return null\n"})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"documentation",children:"Documentation"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["In gdscript ",(0,s.jsx)(e.code,{children:"##"})," is used for documentation and ",(0,s.jsx)(e.code,{children:"#"})," for comments"]}),"\n",(0,s.jsx)(e.li,{children:"Documentation must precede a var or a function declaration to have any effect"}),"\n",(0,s.jsxs)(e.li,{children:["If documenting a script it should be place right after ",(0,s.jsx)(e.code,{children:"class_name X extends Y"})]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"All public functions must be documented"}),", following the Godot documentation recommendations : ",(0,s.jsx)(e.a,{href:"https://docs.godotengine.org/en/stable/tutorials/scripting/gdscript/gdscript_documentation_comments.html",children:"https://docs.godotengine.org/en/stable/tutorials/scripting/gdscript/gdscript_documentation_comments.html"})]}),"\n",(0,s.jsx)(e.li,{children:"Example:"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'## Attempts to retrieve an enemy instance by its ID.\r\n##\r\n## [param id] : ID of the enemy\r\nfunc get_enemy_by_id(id: int) -> IEnemy:\r\n    for enemy in _enemies:\r\n        if enemy.id == id:\r\n            return enemy\r\n    \r\n    Log.trace(Log.Level.ERROR, "Failed to get enemy with id ", id)\r\n    return None\r\n\n'})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Private functions documentation can be omitted"}),", except if:","\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"The function can fail (ideally, no function should fail)."}),"\n",(0,s.jsx)(e.li,{children:"The function can throw exceptions."}),"\n",(0,s.jsx)(e.li,{children:"The function is critical"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["Use ",(0,s.jsx)(e.code,{children:"@deprecated"})," and ",(0,s.jsx)(e.code,{children:"@experimental"})," tags :"]}),"\n"]}),"\n",(0,s.jsxs)(e.table,{children:[(0,s.jsx)(e.thead,{children:(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.th,{children:"Description"}),(0,s.jsx)(e.th,{children:"No tag."})]})}),(0,s.jsxs)(e.tbody,{children:[(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:"Deprecated"}),(0,s.jsxs)(e.td,{children:[(0,s.jsx)(e.code,{children:"@deprecated"}),(0,s.jsx)("br",{}),(0,s.jsx)(e.code,{children:"@deprecated: Use [member another] instead."})]})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:"Experimental"}),(0,s.jsxs)(e.td,{children:[(0,s.jsx)(e.code,{children:"@experimental"}),(0,s.jsx)("br",{}),(0,s.jsx)(e.code,{children:"@experimental: This method is incomplete."})]})]})]})]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Example:"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"## The description of the variable.\r\n## @deprecated: Use [member other_var] instead.\r\nvar my_var\r\n\r\n## If the member has any annotation, the annotation should\r\n## immediately precede it.\r\n@export\r\nvar v3: int = 0\r\n\r\n## Documenting an inner class.\r\n##\r\n## The same rules apply here. The documentation must\r\n## immediately precede the class definition.\r\n##\r\n## @tutorial: https://example.com/tutorial\r\n## @experimental\r\nclass Inner:\r\n\r\n    ## Inner class variable v4.\r\n    var v4\r\n\r\n    ## Inner class function fn.\r\n    func fn(): pass\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["Use ",(0,s.jsx)(e.code,{children:"@tutorial"})," tag to redirect to external documentation"]}),"\n"]}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"code-practices",children:"Code Practices"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Ternary Operators:"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Ternary operators are acceptable but must remain easy to read."}),"\n",(0,s.jsx)(e.li,{children:"Example:"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"return 1 if condition else 2\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"No nested ternary operators is allowed"}),". ",(0,s.jsx)(e.em,{children:"(i will find you and kill you)"})]}),"\n",(0,s.jsx)(e.li,{children:"Example:"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"return 1 if condition1 else (2 if condition2 else 3)  # Not allowed\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Avoid Deep Nesting"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Minimize Indentation Levels:"})," Deep nesting makes code harder to read and maintain. Instead of using multiple nested ",(0,s.jsx)(e.code,{children:"if"})," statements, use guard clauses or early returns to keep the code flat and readable."]}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.strong,{children:"Use early returns to avoid unnecessary nesting:"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.li,{children:"Instead of writing:"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"if condition:\r\n    # some deeply nested logic\r\n    if another_condition:\r\n        # more nested logic\r\n        if yet_another_condition:\r\n            # even deeper logic\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Refactor using guard clauses:"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"if not condition:\r\n    return\r\n\r\nif not another_condition:\r\n    return\r\n\r\nif not yet_another_condition:\r\n    return\r\n\r\n# Logic here is now cleaner and avoids deep indentation\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Limiting Global Variables:"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Limit the use of global variables."}),"\n",(0,s.jsx)(e.li,{children:"If there is no simpler way and the resource is lightweight, use a global variable."}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Always verify a global variable before accessing it"}),"."]}),"\n",(0,s.jsx)(e.li,{children:"Example:"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"if Global.player != null:\r\n    Global.player.do_something()\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Signal Connections:"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Prefer connecting signals from code rather than using the Godot UI (though the latter is still acceptable)."}),"\n",(0,s.jsxs)(e.li,{children:["Always use functions to connect signals instead of writing connection logic directly in core functions like ",(0,s.jsx)(e.code,{children:"_ready"}),"."]}),"\n",(0,s.jsx)(e.li,{children:"Example:"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'func _ready() -> void:\r\n    _connect_signals()\r\n\r\nfunc _connect_signals() -> void:\r\n    connect("my_signal", _on_MyNode_my_signal)\n'})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Functions:"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["A function must do ",(0,s.jsx)(e.strong,{children:"one thing"}),"."]}),"\n",(0,s.jsxs)(e.li,{children:["A function should ",(0,s.jsx)(e.strong,{children:"never"})," crash the game."]}),"\n",(0,s.jsxs)(e.li,{children:["Use ",(0,s.jsx)(e.code,{children:"assert(condition, error_message)"})," to ensure correct usage by future developers."]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"assert"})," raises an error if the condition fails."]}),"\n",(0,s.jsx)(e.li,{children:"Example:"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'func square_root(number: float) -> float:\r\n    assert(number > 0, "You can\'t calculate the square root of a negative number")\r\n    return sqrt(number)\n'})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["Avoid using the ",(0,s.jsx)(e.code,{children:"Variant"})," type unless necessary:","\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Its usage must be justified."}),"\n",(0,s.jsx)(e.li,{children:"A comment should clarify the possible types returned."}),"\n",(0,s.jsxs)(e.li,{children:["Use ",(0,s.jsx)(e.code,{children:"assert"})," to ensure correct typing by other developers."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"eval"})," like code are not allowed:","\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"It can still be used in specific scenario : debug / test scripts"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.li,{children:"Example:"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"# not fucking allowed, it is a hell to debug\r\n# can still be used for debug or test scripts\r\nfunc _ready() -> void:\r\n    var new_script := Script.new()\r\n    new_script.source_code = \"static func test_func():\\nprint('Hello World!')\"\r\n    new_script.reload()\r\n    new_script.test_func()\n"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.strong,{children:"Default parameters values are never allowed in functions"})}),"\n"]}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"snippets",children:"Snippets"}),"\n",(0,s.jsx)(e.h3,{id:"vscode",children:"VSCode"}),"\n",(0,s.jsx)(e.p,{children:"To create new snippet :"}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.code,{children:"Ctrl + Shift + P"})}),"\n",(0,s.jsx)(e.li,{children:"Snippets: Configure snippets"}),"\n",(0,s.jsx)(e.li,{children:"gdscript.json"}),"\n",(0,s.jsx)(e.li,{children:"Copy past snippets"}),"\n"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.strong,{children:"Trace log :"})}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-json",children:'{\r\n\xa0 \xa0 "Trace Log": {\r\n\xa0 \xa0 \xa0 \xa0 "prefix": "trace",\r\n\xa0 \xa0 \xa0 \xa0 "body": [\r\n\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 "Log.trace(Log.Level.${1|DEBUG,INFO,WARN,ERROR,FATAL|}, \\"$2\\");"\r\n\xa0 \xa0 \xa0 \xa0 ],\r\n\xa0 \xa0 \xa0 \xa0 "description": "Insert a trace log with selectable log level"\r\n\xa0 \xa0 }\r\n}\n'})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.strong,{children:"Base gdscript :"})}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-json",children:'{\r\n\xa0 \xa0 "Base gdscript": {\r\n\xa0 \xa0 \xa0 \xa0 "prefix": "gdscript",\r\n\xa0 \xa0 \xa0 \xa0 "body": [\r\n\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 "# core\\n\\n",\r\n\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 "# public\\n\\n",\r\n\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 "# private\\n\\n",\r\n\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 "# signal\\n\\n",\r\n\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 "# event\\n\\n",\r\n\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 "# setget\\n\\n"\r\n\xa0 \xa0 \xa0 \xa0 ],\r\n\xa0 \xa0 \xa0 \xa0 "description": "Base structure for gdscript file"\r\n\xa0 \xa0 }\r\n}\n'})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"external-resources",children:"External resources"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Cheat sheet"})," : ",(0,s.jsx)(e.a,{href:"https://godot.community/topic/78/gdscript-cheatsheet/2",children:"https://godot.community/topic/78/gdscript-cheatsheet/2"})]}),"\n"]}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"todo",children:"TODO"}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Log and Error Handling:"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["Guidelines on handling errors, including the use of ",(0,s.jsx)(e.code,{children:"assert"}),", and custom error messages."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Testing:"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Best practices for writing testable code, unit tests, and integration tests in Godot."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Version Control / Git Flow:"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Rules on maintaining scripts in version control systems using whatever shitty software Pierre want instead of basic Git terminal."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Resource Management:"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Rules for managing and optimizing resources like textures, audio, and scripts in large projects."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Performance Optimization:"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Tips on writing efficient GDScript code, profiling tools, and common performance pitfalls."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Team Collaboration:"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Guidelines for collaborating with other developers, including code reviews, pair programming, and shared coding standards."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Naming Conventions for Other Resources:"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Naming conventions for scenes, nodes, and other non-script resources."}),"\n"]}),"\n"]}),"\n"]})]})}function h(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(o,{...n})}):o(n)}},8453:(n,e,i)=>{i.d(e,{R:()=>c,x:()=>d});var s=i(6540);const r={},l=s.createContext(r);function c(n){const e=s.useContext(l);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function d(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:c(n.components),s.createElement(l.Provider,{value:e},n.children)}}}]);